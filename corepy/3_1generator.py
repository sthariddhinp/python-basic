### Iterator vs Generator

# Iterable
lst = [1,2,3,4,5]
for i in lst:
    print(i)

# Iterator
iterator = iter(lst)
for i in iterator:
    print(i)


## Generator
# Generator is basically used to create iterator.

def square(n):
    for i in range(n):
        return i**2

print(square(3))      # It will return 0. because as we go inside the function it will take first value 0 form range 0-3 and it get sqare of it.


# solution of above that get square 0 is: convert return to yield, then it wil convert entire function to iterator but it is a kind of generator.
def square(n):
    for i in range(n):
        yield i**2

print(square(3))

a = square(3)
print(next(a))   # it will return next item of iterator that is created or generated by using yield keyword in funciton.

# print(list(square(3)))
for i in square(3):
    print(i)           # here useful of yeild keyword is ; it will not only return just one iteration; it will return with respect to all iterations.


# Difference between Iterator and Generator:
    # 1. To create iterator we use iter() function and to generator we use function along with yield keyword.
    # 2. Generator uses the yield keyword. It save the local variable value.
    # 3. Generator in python help us to write fast and compact code.
    # 4. Python Iterator is much more memory efficeint.

# import types,collections

# issubclass(types.GeneratorType,collections.Iterator)